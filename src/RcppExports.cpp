// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// paste_collapse
std::string paste_collapse(CharacterVector strings, std::string collapse);
RcppExport SEXP _filesstrings_paste_collapse(SEXP stringsSEXP, SEXP collapseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< std::string >::type collapse(collapseSEXP);
    rcpp_result_gen = Rcpp::wrap(paste_collapse(strings, collapse));
    return rcpp_result_gen;
END_RCPP
}
// paste_collapse_list_elems
CharacterVector paste_collapse_list_elems(List char_list, std::string collapse);
RcppExport SEXP _filesstrings_paste_collapse_list_elems(SEXP char_listSEXP, SEXP collapseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type char_list(char_listSEXP);
    Rcpp::traits::input_parameter< std::string >::type collapse(collapseSEXP);
    rcpp_result_gen = Rcpp::wrap(paste_collapse_list_elems(char_list, collapse));
    return rcpp_result_gen;
END_RCPP
}
// str_list_remove_empties
List str_list_remove_empties(List char_list);
RcppExport SEXP _filesstrings_str_list_remove_empties(SEXP char_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type char_list(char_listSEXP);
    rcpp_result_gen = Rcpp::wrap(str_list_remove_empties(char_list));
    return rcpp_result_gen;
END_RCPP
}
// str_list_nth_elems_
CharacterVector str_list_nth_elems_(List char_list, IntegerVector n);
RcppExport SEXP _filesstrings_str_list_nth_elems_(SEXP char_listSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type char_list(char_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(str_list_nth_elems_(char_list, n));
    return rcpp_result_gen;
END_RCPP
}
// num_list_nth_elems_
NumericVector num_list_nth_elems_(List num_list, IntegerVector n);
RcppExport SEXP _filesstrings_num_list_nth_elems_(SEXP num_listSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type num_list(num_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(num_list_nth_elems_(num_list, n));
    return rcpp_result_gen;
END_RCPP
}
// interleave_strings
CharacterVector interleave_strings(CharacterVector strings1, CharacterVector strings2);
RcppExport SEXP _filesstrings_interleave_strings(SEXP strings1SEXP, SEXP strings2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strings1(strings1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type strings2(strings2SEXP);
    rcpp_result_gen = Rcpp::wrap(interleave_strings(strings1, strings2));
    return rcpp_result_gen;
END_RCPP
}
// interleave_correctly_vec
CharacterVector interleave_correctly_vec(std::string orig, CharacterVector strings1, CharacterVector strings2);
RcppExport SEXP _filesstrings_interleave_correctly_vec(SEXP origSEXP, SEXP strings1SEXP, SEXP strings2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type orig(origSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type strings1(strings1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type strings2(strings2SEXP);
    rcpp_result_gen = Rcpp::wrap(interleave_correctly_vec(orig, strings1, strings2));
    return rcpp_result_gen;
END_RCPP
}
// interleave_correctly
List interleave_correctly(CharacterVector orig, List strings1, List strings2);
RcppExport SEXP _filesstrings_interleave_correctly(SEXP origSEXP, SEXP strings1SEXP, SEXP strings2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type orig(origSEXP);
    Rcpp::traits::input_parameter< List >::type strings1(strings1SEXP);
    Rcpp::traits::input_parameter< List >::type strings2(strings2SEXP);
    rcpp_result_gen = Rcpp::wrap(interleave_correctly(orig, strings1, strings2));
    return rcpp_result_gen;
END_RCPP
}
// interleave_char_lists
List interleave_char_lists(List strings1, List strings2);
RcppExport SEXP _filesstrings_interleave_char_lists(SEXP strings1SEXP, SEXP strings2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type strings1(strings1SEXP);
    Rcpp::traits::input_parameter< List >::type strings2(strings2SEXP);
    rcpp_result_gen = Rcpp::wrap(interleave_char_lists(strings1, strings2));
    return rcpp_result_gen;
END_RCPP
}
// intmat_list_nrows
IntegerVector intmat_list_nrows(List intmat_list);
RcppExport SEXP _filesstrings_intmat_list_nrows(SEXP intmat_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type intmat_list(intmat_listSEXP);
    rcpp_result_gen = Rcpp::wrap(intmat_list_nrows(intmat_list));
    return rcpp_result_gen;
END_RCPP
}
// intmat_list_bind_nth_rows
IntegerVector intmat_list_bind_nth_rows(List intmat_list, IntegerVector n);
RcppExport SEXP _filesstrings_intmat_list_bind_nth_rows(SEXP intmat_listSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type intmat_list(intmat_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(intmat_list_bind_nth_rows(intmat_list, n));
    return rcpp_result_gen;
END_RCPP
}
// match_arg_index
IntegerVector match_arg_index(CharacterVector arg, CharacterVector choices);
RcppExport SEXP _filesstrings_match_arg_index(SEXP argSEXP, SEXP choicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type arg(argSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type choices(choicesSEXP);
    rcpp_result_gen = Rcpp::wrap(match_arg_index(arg, choices));
    return rcpp_result_gen;
END_RCPP
}
// int_lst_first_col
List int_lst_first_col(List x);
RcppExport SEXP _filesstrings_int_lst_first_col(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(int_lst_first_col(x));
    return rcpp_result_gen;
END_RCPP
}
// str_elems
List str_elems(StringVector strings, List locations);
RcppExport SEXP _filesstrings_str_elems(SEXP stringsSEXP, SEXP locationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< List >::type locations(locationsSEXP);
    rcpp_result_gen = Rcpp::wrap(str_elems(strings, locations));
    return rcpp_result_gen;
END_RCPP
}
// lst_df_pos_brace
List lst_df_pos_brace(List positions, List braces);
RcppExport SEXP _filesstrings_lst_df_pos_brace(SEXP positionsSEXP, SEXP bracesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< List >::type braces(bracesSEXP);
    rcpp_result_gen = Rcpp::wrap(lst_df_pos_brace(positions, braces));
    return rcpp_result_gen;
END_RCPP
}
// lst_char_to_num
List lst_char_to_num(List x);
RcppExport SEXP _filesstrings_lst_char_to_num(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lst_char_to_num(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_filesstrings_paste_collapse", (DL_FUNC) &_filesstrings_paste_collapse, 2},
    {"_filesstrings_paste_collapse_list_elems", (DL_FUNC) &_filesstrings_paste_collapse_list_elems, 2},
    {"_filesstrings_str_list_remove_empties", (DL_FUNC) &_filesstrings_str_list_remove_empties, 1},
    {"_filesstrings_str_list_nth_elems_", (DL_FUNC) &_filesstrings_str_list_nth_elems_, 2},
    {"_filesstrings_num_list_nth_elems_", (DL_FUNC) &_filesstrings_num_list_nth_elems_, 2},
    {"_filesstrings_interleave_strings", (DL_FUNC) &_filesstrings_interleave_strings, 2},
    {"_filesstrings_interleave_correctly_vec", (DL_FUNC) &_filesstrings_interleave_correctly_vec, 3},
    {"_filesstrings_interleave_correctly", (DL_FUNC) &_filesstrings_interleave_correctly, 3},
    {"_filesstrings_interleave_char_lists", (DL_FUNC) &_filesstrings_interleave_char_lists, 2},
    {"_filesstrings_intmat_list_nrows", (DL_FUNC) &_filesstrings_intmat_list_nrows, 1},
    {"_filesstrings_intmat_list_bind_nth_rows", (DL_FUNC) &_filesstrings_intmat_list_bind_nth_rows, 2},
    {"_filesstrings_match_arg_index", (DL_FUNC) &_filesstrings_match_arg_index, 2},
    {"_filesstrings_int_lst_first_col", (DL_FUNC) &_filesstrings_int_lst_first_col, 1},
    {"_filesstrings_str_elems", (DL_FUNC) &_filesstrings_str_elems, 2},
    {"_filesstrings_lst_df_pos_brace", (DL_FUNC) &_filesstrings_lst_df_pos_brace, 2},
    {"_filesstrings_lst_char_to_num", (DL_FUNC) &_filesstrings_lst_char_to_num, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_filesstrings(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
