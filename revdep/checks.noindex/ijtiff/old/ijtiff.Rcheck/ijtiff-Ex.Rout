
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ijtiff"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ijtiff')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_EBImage")
> ### * as_EBImage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_EBImage
> ### Title: Convert an ijtiff_img to an EBImage::Image.
> ### Aliases: as_EBImage
> 
> ### ** Examples
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type. Reading 4 channels and 1 frame . . .
 Done.
> str(img)
 'ijtiff_img' num [1:76, 1:100, 1:4, 1] 0 0 0 0 0 0 0 0 0 0 ...
 - attr(*, "width")= int 100
 - attr(*, "length")= int 76
 - attr(*, "bits_per_sample")= int 8
 - attr(*, "samples_per_pixel")= int 4
 - attr(*, "sample_format")= chr "uint"
 - attr(*, "planar_config")= chr "contiguous"
 - attr(*, "rows_per_strip")= int 76
 - attr(*, "compression")= chr "LZW"
 - attr(*, "x_resolution")= num 300
 - attr(*, "y_resolution")= num 300
 - attr(*, "resolution_unit")= chr "inch"
 - attr(*, "orientation")= chr "top_left"
 - attr(*, "color_space")= chr "RGB"
> str(as_EBImage(img))
Formal class 'Image' [package "EBImage"] with 2 slots
  ..@ .Data    : num [1:100, 1:76, 1:4, 1] 0 0 0 0 0 0 0 0 0 0 ...
  ..@ colormode: int 2
> 
> 
> 
> cleanEx()
> nameEx("count_frames")
> ### * count_frames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_frames
> ### Title: Count the number of frames in a TIFF file.
> ### Aliases: count_frames frames_count
> 
> ### ** Examples
> 
> count_frames(system.file("img", "Rlogo.tif", package = "ijtiff"))
[1] 1
attr(,"n_dirs")
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("display")
> ### * display
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: display
> ### Title: Basic image display.
> ### Aliases: display
> 
> ### ** Examples
> 
> if (requireNamespace("EBImage")) {
+   img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
+   display(img)
+   display(img[, , 1, 1]) # first (red) channel, first frame
+   display(img[, , 2, ]) # second (green) channel, first frame
+   display(img[, , 3, ]) # third (blue) channel, first frame
+   display(img, basic = TRUE) # displays first (red) channel, first frame
+ }
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type. Reading 4 channels and 1 frame . . .
 Done.
> 
> 
> 
> cleanEx()
> nameEx("ijtiff_img")
> ### * ijtiff_img
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ijtiff_img
> ### Title: 'ijtiff_img' class.
> ### Aliases: ijtiff_img as_ijtiff_img
> 
> ### ** Examples
> 
> img <- matrix(1:4, nrow = 2) # to be a single-channel, grayscale image
> ijtiff_img(img, description = "single-channel, grayscale")
2x2 pixel ijtiff_img with 1 channel and 1 frame.
Preview (top left of first channel of first frame):
     [,1] [,2]
[1,]    1    3
[2,]    2    4
── TIFF tags ───────────────────────────────────────────────────────────────────
● description: single-channel, grayscale
> img <- array(seq_len(2^3), dim = rep(2, 3)) # 1 channel, 2 frame
> ijtiff_img(img, description = "blah blah blah")
2x2 pixel ijtiff_img with 1 channel and 2 frames.
Preview (top left of first channel of first frame):
     [,1] [,2]
[1,]    1    3
[2,]    2    4
── TIFF tags ───────────────────────────────────────────────────────────────────
● description: blah blah blah
> img <- array(seq_len(2^3), dim = c(2, 2, 2, 1)) #  2 channel, 1 frame
> ijtiff_img(img, description = "blah blah")
2x2 pixel ijtiff_img with 2 channels and 1 frame.
Preview (top left of first channel of first frame):
     [,1] [,2]
[1,]    1    3
[2,]    2    4
── TIFF tags ───────────────────────────────────────────────────────────────────
● description: blah blah
> img <- array(seq_len(2^4), dim = rep(2, 4)) # 2 channel, 2 frame
> ijtiff_img(img, software = "R")
2x2 pixel ijtiff_img with 2 channels and 2 frames.
Preview (top left of first channel of first frame):
     [,1] [,2]
[1,]    1    3
[2,]    2    4
── TIFF tags ───────────────────────────────────────────────────────────────────
● software: R
> 
> 
> 
> cleanEx()
> nameEx("linescan-conversion")
> ### * linescan-conversion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: linescan-conversion
> ### Title: Rejig linescan images.
> ### Aliases: linescan-conversion linescan_to_stack stack_to_linescan
> 
> ### ** Examples
> 
> linescan <- ijtiff_img(array(rep(1:4, each = 4), dim = c(4, 4, 1, 1)))
> print(linescan)
4x4 pixel ijtiff_img with 1 channel and 1 frame.
Preview (top left of first channel of first frame):
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    1    2    3    4
[3,]    1    2    3    4
[4,]    1    2    3    4
── TIFF tags ───────────────────────────────────────────────────────────────────
> stack <- linescan_to_stack(linescan)
> print(stack)
1x4 pixel ijtiff_img with 1 channel and 4 frames.
Preview (top left of first channel of first frame):
[1] 1 2 3 4
── TIFF tags ───────────────────────────────────────────────────────────────────
> linescan <- stack_to_linescan(stack)
> print(linescan)
4x4 pixel ijtiff_img with 1 channel and 1 frame.
Preview (top left of first channel of first frame):
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    1    2    3    4
[3,]    1    2    3    4
[4,]    1    2    3    4
── TIFF tags ───────────────────────────────────────────────────────────────────
> 
> 
> 
> cleanEx()
> nameEx("read_tags")
> ### * read_tags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_tags
> ### Title: Read TIFF tag information without actually reading the image
> ###   array.
> ### Aliases: read_tags tags_read
> 
> ### ** Examples
> 
> read_tags(system.file("img", "Rlogo.tif", package = "ijtiff"))
$frame1
$frame1$width
[1] 100

$frame1$length
[1] 76

$frame1$bits_per_sample
[1] 8

$frame1$samples_per_pixel
[1] 4

$frame1$sample_format
[1] "uint"

$frame1$planar_config
[1] "contiguous"

$frame1$rows_per_strip
[1] 76

$frame1$compression
[1] "LZW"

$frame1$x_resolution
[1] 299.99

$frame1$y_resolution
[1] 299.99

$frame1$resolution_unit
[1] "inch"

$frame1$orientation
[1] "top_left"

$frame1$color_space
[1] "RGB"


> read_tags(system.file("img", "Rlogo-banana.tif", package = "ijtiff"),
+   frames = c(2, 4)
+ )
$frame2
$frame2$width
[1] 100

$frame2$length
[1] 78

$frame2$bits_per_sample
[1] 8

$frame2$samples_per_pixel
[1] 3

$frame2$sample_format
[1] "uint"

$frame2$planar_config
[1] "contiguous"

$frame2$rows_per_strip
[1] 78

$frame2$compression
[1] "deflate"

$frame2$software
[1] "ijtiff package, R 4.0.0"

$frame2$color_space
[1] "black is zero"


$frame4
$frame4$width
[1] 100

$frame4$length
[1] 78

$frame4$bits_per_sample
[1] 8

$frame4$samples_per_pixel
[1] 3

$frame4$sample_format
[1] "uint"

$frame4$planar_config
[1] "contiguous"

$frame4$rows_per_strip
[1] 78

$frame4$compression
[1] "deflate"

$frame4$software
[1] "ijtiff package, R 4.0.0"

$frame4$color_space
[1] "black is zero"


> 
> 
> 
> cleanEx()
> nameEx("read_tif")
> ### * read_tif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_tif
> ### Title: Read an image stored in the TIFF format
> ### Aliases: read_tif tif_read
> 
> ### ** Examples
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type. Reading 4 channels and 1 frame . . .
 Done.
> 
> 
> 
> cleanEx()
> nameEx("text-image-io")
> ### * text-image-io
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: text-image-io
> ### Title: Read/write an image array to/from disk as text file(s).
> ### Aliases: text-image-io write_txt_img read_txt_img txt_img_write
> ###   txt_img_read
> 
> ### ** Examples
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type. Reading 4 channels and 1 frame . . .
 Done.
> tmptxt <- tempfile(pattern = "img", fileext = ".txt")
> write_txt_img(img, tmptxt)
Writing img1e4011eed09c_ch1.txt, img1e4011eed09c_ch2.txt, img1e4011eed09c_ch3.txt and img1e4011eed09c_ch4.txt: a 76x100 pixel text image with 4 channels and 1 frame . . .
 Done.
> tmptxt_ch1_path <- paste0(filesstrings::before_last_dot(tmptxt), "_ch1.txt")
> print(tmptxt_ch1_path)
[1] "/var/folders/l_/2mwm03p55zg7zjykv084hhvr0000gn/T//Rtmp04xOzh/img1e4011eed09c_ch1.txt"
> txt_img <- read_txt_img(tmptxt_ch1_path)
Reading 76x100 pixel text image 'img1e4011eed09c_ch1.txt' . . .
 Done.
> 
> 
> 
> cleanEx()
> nameEx("tif_tags_reference")
> ### * tif_tags_reference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tif_tags_reference
> ### Title: TIFF tag reference.
> ### Aliases: tif_tags_reference
> 
> ### ** Examples
> 
> tif_tags_reference()
[90m# A tibble: 96 x 10[39m
   code_dec code_hex name  short_descripti… type  url   libtiff_name c_type
      [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m    [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m            [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m        [3m[90m<chr>[39m[23m 
[90m 1[39m      254 00FE     NewS… A general indic… base… http… TIFFTAG_SUB… LONG  
[90m 2[39m      255 00FF     Subf… A general indic… base… http… TIFFTAG_OSU… SHORT 
[90m 3[39m      256 0100     Imag… The number of c… base… http… TIFFTAG_IMA… SHORT…
[90m 4[39m      257 0101     Imag… The number of r… base… http… TIFFTAG_IMA… SHORT…
[90m 5[39m      258 0102     Bits… Number of bits … base… http… TIFFTAG_BIT… SHORT 
[90m 6[39m      259 0103     Comp… Compression sch… base… http… TIFFTAG_COM… SHORT 
[90m 7[39m      262 0106     Phot… The color space… base… http… TIFFTAG_PHO… SHORT 
[90m 8[39m      263 0107     Thre… For black and w… base… http… TIFFTAG_THR… SHORT 
[90m 9[39m      264 0108     Cell… The width of th… base… http… TIFFTAG_CEL… SHORT 
[90m10[39m      265 0109     Cell… The length of t… base… http… TIFFTAG_CEL… SHORT 
[90m# … with 86 more rows, and 2 more variables: count [3m[90m<chr>[90m[23m, default [3m[90m<chr>[90m[23m[39m
> 
> 
> 
> cleanEx()
> nameEx("write_tif")
> ### * write_tif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_tif
> ### Title: Write images in TIFF format
> ### Aliases: write_tif tif_write
> 
> ### ** Examples
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type. Reading 4 channels and 1 frame . . .
 Done.
> temp_dir <- tempdir()
> write_tif(img, paste0(temp_dir, "/", "Rlogo"))
Writing Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
> img <- matrix(1:4, nrow = 2)
> write_tif(img, paste0(temp_dir, "/", "tiny2x2"))
Writing tiny2x2.tif: an 8-bit, 2x2 pixel image of unsigned
integer type with 1 channel and 1 frame . . .
 Done.
> list.files(temp_dir, pattern = "tif$")
[1] "Rlogo.tif"   "tiny2x2.tif"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.959 0.239 4.802 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
