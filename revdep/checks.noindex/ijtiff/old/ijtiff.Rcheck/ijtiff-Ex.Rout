
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ijtiff"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ijtiff')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_EBImage")
> ### * as_EBImage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_EBImage
> ### Title: Convert an ijtiff_img to an EBImage::Image.
> ### Aliases: as_EBImage
> 
> ### ** Examples
> 
> if (require(EBImage)) {
+   img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
+   str(img)
+   str(as_EBImage(img))
+   img <- read_tif(system.file("img", "2ch_ij.tif", package = "ijtiff"))
+   str(img)
+   str(as_EBImage(img))
+ }
Loading required package: EBImage

Attaching package: â€˜EBImageâ€™

The following object is masked from â€˜package:ijtiffâ€™:

    display

Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
 'ijtiff_img' num [1:76, 1:100, 1:4, 1] 0 0 0 0 0 0 0 0 0 0 ...
 - attr(*, "width")= int 100
 - attr(*, "length")= int 76
 - attr(*, "bits_per_sample")= int 8
 - attr(*, "samples_per_pixel")= int 4
 - attr(*, "sample_format")= chr "uint"
 - attr(*, "planar_config")= chr "contiguous"
 - attr(*, "rows_per_strip")= int 76
 - attr(*, "compression")= chr "LZW"
 - attr(*, "x_resolution")= num 300
 - attr(*, "y_resolution")= num 300
 - attr(*, "resolution_unit")= chr "inch"
 - attr(*, "orientation")= chr "top_left"
 - attr(*, "color_space")= chr "RGB"
Formal class 'Image' [package "EBImage"] with 2 slots
  ..@ .Data    : num [1:100, 1:76, 1:4, 1] 0 0 0 0 0 0 0 0 0 0 ...
  ..@ colormode: int 2
Reading 2ch_ij.tif: an 8-bit, 15x6 pixel image of unsigned
integer type with 2 channels and 5 frames . . .
 Done.
 'ijtiff_img' num [1:15, 1:6, 1:2, 1:5] 0 0 0 1 0 0 1 0 1 1 ...
 - attr(*, "width")= int 6
 - attr(*, "length")= int 15
 - attr(*, "bits_per_sample")= int 8
 - attr(*, "samples_per_pixel")= int 1
 - attr(*, "sample_format")= chr "uint"
 - attr(*, "planar_config")= chr "contiguous"
 - attr(*, "rows_per_strip")= int 15
 - attr(*, "compression")= chr "none"
 - attr(*, "description")= chr "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"
 - attr(*, "color_space")= chr "black is zero"
Formal class 'Image' [package "EBImage"] with 2 slots
  ..@ .Data    : num [1:6, 1:15, 1:2, 1:5] 0 0.00392 0.00392 0 0 ...
  ..@ colormode: int 0
> 
> 
> 
> cleanEx()

detaching â€˜package:EBImageâ€™

> nameEx("count_imgs")
> ### * count_imgs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_imgs
> ### Title: Count the number of images in a TIFF file.
> ### Aliases: count_imgs
> 
> ### ** Examples
> 
> count_imgs(system.file("img", "Rlogo.tif", package="ijtiff"))
[1] 1
> count_imgs(system.file("img", "2ch_ij.tif", package="ijtiff"))
[1] 10
> 
> 
> 
> 
> cleanEx()
> nameEx("display")
> ### * display
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: display
> ### Title: Basic image display.
> ### Aliases: display
> 
> ### ** Examples
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
> display(img)
> display(img[, , 1, 1])  # first (red) channel, first frame
> display(img[, , 2, ])  # second (green) channel, first frame
> display(img[, , 3, ])  # third (blue) channel, first frame
> display(img, basic = TRUE)  # displays first (red) channel, first frame
> 
> 
> 
> 
> cleanEx()
> nameEx("get_tiff_tags_reference")
> ### * get_tiff_tags_reference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_tiff_tags_reference
> ### Title: TIFF tag reference.
> ### Aliases: get_tiff_tags_reference
> 
> ### ** Examples
> 
> get_tiff_tags_reference()
[90m# A tibble: 96 x 10[39m
   code_dec code_hex name  short_descriptiâ€¦ type  url   libtiff_name c_type
      [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m    [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m            [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m        [3m[90m<chr>[39m[23m 
[90m 1[39m      254 00FE     NewSâ€¦ A general indicâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_SUBâ€¦ LONG  
[90m 2[39m      255 00FF     Subfâ€¦ A general indicâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_OSUâ€¦ SHORT 
[90m 3[39m      256 0100     Imagâ€¦ The number of câ€¦ baseâ€¦ httpâ€¦ TIFFTAG_IMAâ€¦ SHORTâ€¦
[90m 4[39m      257 0101     Imagâ€¦ The number of râ€¦ baseâ€¦ httpâ€¦ TIFFTAG_IMAâ€¦ SHORTâ€¦
[90m 5[39m      258 0102     Bitsâ€¦ Number of bits â€¦ baseâ€¦ httpâ€¦ TIFFTAG_BITâ€¦ SHORT 
[90m 6[39m      259 0103     Compâ€¦ Compression schâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_COMâ€¦ SHORT 
[90m 7[39m      262 0106     Photâ€¦ The color spaceâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_PHOâ€¦ SHORT 
[90m 8[39m      263 0107     Threâ€¦ For black and wâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_THRâ€¦ SHORT 
[90m 9[39m      264 0108     Cellâ€¦ The width of thâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_CELâ€¦ SHORT 
[90m10[39m      265 0109     Cellâ€¦ The length of tâ€¦ baseâ€¦ httpâ€¦ TIFFTAG_CELâ€¦ SHORT 
[90m# â€¦ with 86 more rows, and 2 more variables: count [3m[90m<chr>[90m[23m, default [3m[90m<chr>[90m[23m[39m
> 
> 
> 
> 
> cleanEx()
> nameEx("ijtiff_img")
> ### * ijtiff_img
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ijtiff_img
> ### Title: 'ijtiff_img' class.
> ### Aliases: ijtiff_img as_ijtiff_img
> 
> ### ** Examples
> 
> img <- matrix(1:4, nrow = 2)  # to be a single-channel, grayscale image
> ijtiff_img(img, description = "single-channel, grayscale")
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

attr(,"description")
[1] "single-channel, grayscale"
attr(,"class")
[1] "ijtiff_img" "array"     
> img <- array(seq_len(2 ^ 3), dim = rep(2, 3))  # 1 channel, 2 frame
> ijtiff_img(img, description = "blah blah blah")
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 1, 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8

attr(,"description")
[1] "blah blah blah"
attr(,"class")
[1] "ijtiff_img" "array"     
> img <- array(seq_len(2 ^ 3), dim = c(2, 2, 2, 1))  #  2 channel, 1 frame
> ijtiff_img(img, description = "blah blah")
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

attr(,"description")
[1] "blah blah"
attr(,"class")
[1] "ijtiff_img" "array"     
> img <- array(seq_len(2 ^ 4), dim = rep(2, 4))  # 2 channel, 2 frame
> ijtiff_img(img, software = "R")
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2

     [,1] [,2]
[1,]   13   15
[2,]   14   16

attr(,"software")
[1] "R"
attr(,"class")
[1] "ijtiff_img" "array"     
> 
> 
> 
> cleanEx()
> nameEx("linescan-conversion")
> ### * linescan-conversion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: linescan-conversion
> ### Title: Rejig linescan images.
> ### Aliases: linescan-conversion linescan_to_stack stack_to_linescan
> 
> ### ** Examples
> 
> linescan <- ijtiff_img(array(rep(1:4, each = 4), dim = c(4, 4, 1, 1)))
> print(linescan)
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    1    2    3    4
[3,]    1    2    3    4
[4,]    1    2    3    4

attr(,"class")
[1] "ijtiff_img" "array"     
> stack <- linescan_to_stack(linescan)
> print(stack)
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4

, , 1, 2

     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4

, , 1, 3

     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4

, , 1, 4

     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4

attr(,"class")
[1] "ijtiff_img" "array"     
> linescan <- stack_to_linescan(stack)
> print(linescan)
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    1    2    3    4
[3,]    1    2    3    4
[4,]    1    2    3    4

attr(,"class")
[1] "ijtiff_img" "array"     
> 
> 
> 
> 
> cleanEx()
> nameEx("read_tags")
> ### * read_tags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_tags
> ### Title: Read TIFF tag information without actually reading the image
> ###   array.
> ### Aliases: read_tags
> 
> ### ** Examples
> 
> read_tags(system.file("img", "Rlogo.tif", package="ijtiff"))
$img1
$img1$width
[1] 100

$img1$length
[1] 76

$img1$bits_per_sample
[1] 8

$img1$samples_per_pixel
[1] 4

$img1$sample_format
[1] "uint"

$img1$planar_config
[1] "contiguous"

$img1$rows_per_strip
[1] 76

$img1$compression
[1] "LZW"

$img1$x_resolution
[1] 299.99

$img1$y_resolution
[1] 299.99

$img1$resolution_unit
[1] "inch"

$img1$orientation
[1] "top_left"

$img1$color_space
[1] "RGB"


> read_tags(system.file("img", "2ch_ij.tif", package="ijtiff"))
$img1
$img1$width
[1] 6

$img1$length
[1] 15

$img1$bits_per_sample
[1] 8

$img1$samples_per_pixel
[1] 1

$img1$sample_format
[1] "uint"

$img1$planar_config
[1] "contiguous"

$img1$rows_per_strip
[1] 15

$img1$compression
[1] "none"

$img1$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img1$color_space
[1] "black is zero"


$img2
$img2$width
[1] 6

$img2$length
[1] 15

$img2$bits_per_sample
[1] 8

$img2$samples_per_pixel
[1] 1

$img2$sample_format
[1] "uint"

$img2$planar_config
[1] "contiguous"

$img2$rows_per_strip
[1] 15

$img2$compression
[1] "none"

$img2$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img2$color_space
[1] "black is zero"


$img3
$img3$width
[1] 6

$img3$length
[1] 15

$img3$bits_per_sample
[1] 8

$img3$samples_per_pixel
[1] 1

$img3$sample_format
[1] "uint"

$img3$planar_config
[1] "contiguous"

$img3$rows_per_strip
[1] 15

$img3$compression
[1] "none"

$img3$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img3$color_space
[1] "black is zero"


$img4
$img4$width
[1] 6

$img4$length
[1] 15

$img4$bits_per_sample
[1] 8

$img4$samples_per_pixel
[1] 1

$img4$sample_format
[1] "uint"

$img4$planar_config
[1] "contiguous"

$img4$rows_per_strip
[1] 15

$img4$compression
[1] "none"

$img4$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img4$color_space
[1] "black is zero"


$img5
$img5$width
[1] 6

$img5$length
[1] 15

$img5$bits_per_sample
[1] 8

$img5$samples_per_pixel
[1] 1

$img5$sample_format
[1] "uint"

$img5$planar_config
[1] "contiguous"

$img5$rows_per_strip
[1] 15

$img5$compression
[1] "none"

$img5$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img5$color_space
[1] "black is zero"


$img6
$img6$width
[1] 6

$img6$length
[1] 15

$img6$bits_per_sample
[1] 8

$img6$samples_per_pixel
[1] 1

$img6$sample_format
[1] "uint"

$img6$planar_config
[1] "contiguous"

$img6$rows_per_strip
[1] 15

$img6$compression
[1] "none"

$img6$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img6$color_space
[1] "black is zero"


$img7
$img7$width
[1] 6

$img7$length
[1] 15

$img7$bits_per_sample
[1] 8

$img7$samples_per_pixel
[1] 1

$img7$sample_format
[1] "uint"

$img7$planar_config
[1] "contiguous"

$img7$rows_per_strip
[1] 15

$img7$compression
[1] "none"

$img7$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img7$color_space
[1] "black is zero"


$img8
$img8$width
[1] 6

$img8$length
[1] 15

$img8$bits_per_sample
[1] 8

$img8$samples_per_pixel
[1] 1

$img8$sample_format
[1] "uint"

$img8$planar_config
[1] "contiguous"

$img8$rows_per_strip
[1] 15

$img8$compression
[1] "none"

$img8$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img8$color_space
[1] "black is zero"


$img9
$img9$width
[1] 6

$img9$length
[1] 15

$img9$bits_per_sample
[1] 8

$img9$samples_per_pixel
[1] 1

$img9$sample_format
[1] "uint"

$img9$planar_config
[1] "contiguous"

$img9$rows_per_strip
[1] 15

$img9$compression
[1] "none"

$img9$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img9$color_space
[1] "black is zero"


$img10
$img10$width
[1] 6

$img10$length
[1] 15

$img10$bits_per_sample
[1] 8

$img10$samples_per_pixel
[1] 1

$img10$sample_format
[1] "uint"

$img10$planar_config
[1] "contiguous"

$img10$rows_per_strip
[1] 15

$img10$compression
[1] "none"

$img10$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img10$color_space
[1] "black is zero"


> read_tags(system.file("img", "2ch_ij.tif", package="ijtiff"), all = c(2, 4))
$img2
$img2$width
[1] 6

$img2$length
[1] 15

$img2$bits_per_sample
[1] 8

$img2$samples_per_pixel
[1] 1

$img2$sample_format
[1] "uint"

$img2$planar_config
[1] "contiguous"

$img2$rows_per_strip
[1] 15

$img2$compression
[1] "none"

$img2$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img2$color_space
[1] "black is zero"


$img4
$img4$width
[1] 6

$img4$length
[1] 15

$img4$bits_per_sample
[1] 8

$img4$samples_per_pixel
[1] 1

$img4$sample_format
[1] "uint"

$img4$planar_config
[1] "contiguous"

$img4$rows_per_strip
[1] 15

$img4$compression
[1] "none"

$img4$description
[1] "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"

$img4$color_space
[1] "black is zero"


> 
> 
> 
> 
> cleanEx()
> nameEx("read_tif")
> ### * read_tif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_tif
> ### Title: Read an image stored in the TIFF format
> ### Aliases: read_tif
> 
> ### ** Examples
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package = "ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
> img <- read_tif(system.file("img", "2ch_ij.tif", package = "ijtiff"))
Reading 2ch_ij.tif: an 8-bit, 15x6 pixel image of unsigned
integer type with 2 channels and 5 frames . . .
 Done.
> str(img)  # we see that `ijtiff` correctly recognises this image's 2 channels
 'ijtiff_img' num [1:15, 1:6, 1:2, 1:5] 0 0 0 1 0 0 1 0 1 1 ...
 - attr(*, "width")= int 6
 - attr(*, "length")= int 15
 - attr(*, "bits_per_sample")= int 8
 - attr(*, "samples_per_pixel")= int 1
 - attr(*, "sample_format")= chr "uint"
 - attr(*, "planar_config")= chr "contiguous"
 - attr(*, "rows_per_strip")= int 15
 - attr(*, "compression")= chr "none"
 - attr(*, "description")= chr "ImageJ=1.51s\nimages=10\nchannels=2\nframes=5\nhyperstack=true\nmode=composite\nloop=false\n"
 - attr(*, "color_space")= chr "black is zero"
> 
> 
> 
> 
> cleanEx()
> nameEx("text-image-io")
> ### * text-image-io
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: text-image-io
> ### Title: Read/write an image array to/from disk as text file(s).
> ### Aliases: text-image-io write_txt_img read_txt_img
> 
> ### ** Examples
> 
> img <- read_tif(system.file('img', 'Rlogo.tif', package = 'ijtiff'))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
> tmptxt <- tempfile(pattern = "img", fileext = ".txt")
> write_txt_img(img, tmptxt)
Writing imgaeb07e56de1c_ch1.txt, imgaeb07e56de1c_ch2.txt, imgaeb07e56de1c_ch3.txt and imgaeb07e56de1c_ch4.txt: a 76x100 pixel text image with 4 channels and 1 frame . . .
 Done.
> tmptxt_ch1_path <- paste0(filesstrings::before_last_dot(tmptxt), "_ch1.txt")
> print(tmptxt_ch1_path)
[1] "/var/folders/l_/2mwm03p55zg7zjykv084hhvr0000gn/T//Rtmp3s9Ceg/imgaeb07e56de1c_ch1.txt"
> txt_img <- read_txt_img(tmptxt_ch1_path)
Reading 76x100 pixel text image 'imgaeb07e56de1c_ch1.txt' . . .
 Done.
> 
> 
> 
> 
> cleanEx()
> nameEx("write_tif")
> ### * write_tif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_tif
> ### Title: Write images in TIFF format
> ### Aliases: write_tif
> 
> ### ** Examples
> 
> 
> img <- read_tif(system.file("img", "Rlogo.tif", package="ijtiff"))
Reading Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
> temp_dir <- tempdir()
> write_tif(img, paste0(temp_dir, "/", "Rlogo"))
Writing Rlogo.tif: an 8-bit, 76x100 pixel image of unsigned
integer type with 4 channels and 1 frame . . .
 Done.
> img <- matrix(1:4, nrow = 2)
> write_tif(img, paste0(temp_dir, "/", "tiny2x2"))
Writing tiny2x2.tif: an 8-bit, 2x2 pixel image of unsigned
integer type with 1 channel and 1 frame . . .
 Done.
> list.files(temp_dir, pattern = "tif$")
[1] "Rlogo.tif"   "tiny2x2.tif"
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.951 0.161 2.416 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
