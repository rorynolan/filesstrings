
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "autothresholdr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('autothresholdr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("auto_thresh")
> ### * auto_thresh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auto_thresh
> ### Title: Automatically threshold an array of non-negative integers.
> ### Aliases: auto_thresh auto_thresh_mask auto_thresh_apply_mask mask
> ###   apply_mask
> 
> ### ** Examples
> 
> img_location <- system.file("extdata", "eg.tif", package = "autothresholdr")
> img <- ijtiff::read_tif(img_location)
Reading eg.tif: an 8-bit, 100x100 pixel image of unsigned
integer type. Reading 1 channel and 1 frame . . .
 Done.
> auto_thresh(img, "huang")
[1] 5
attr(,"ignore_black")
[1] FALSE
attr(,"ignore_white")
[1] FALSE
attr(,"ignore_na")
[1] FALSE
attr(,"autothresh_method")
[1] "Huang"
attr(,"class")
[1] "th"      "integer"
> auto_thresh(img, "tri")
[1] 3
attr(,"ignore_black")
[1] FALSE
attr(,"ignore_white")
[1] FALSE
attr(,"ignore_na")
[1] FALSE
attr(,"autothresh_method")
[1] "Triangle"
attr(,"class")
[1] "th"      "integer"
> auto_thresh(img, "Otsu")
[1] 13
attr(,"ignore_black")
[1] FALSE
attr(,"ignore_white")
[1] FALSE
attr(,"ignore_na")
[1] FALSE
attr(,"autothresh_method")
[1] "Otsu"
attr(,"class")
[1] "th"      "integer"
> auto_thresh(img, 9)
[1] 9
attr(,"ignore_black")
[1] NA
attr(,"ignore_white")
[1] NA
attr(,"ignore_na")
[1] NA
attr(,"autothresh_method")
[1] NA
attr(,"class")
[1] "th"      "numeric"
> mask <- auto_thresh_mask(img, "huang")
> ijtiff::display(mask[, , 1, 1])
> masked <- auto_thresh_apply_mask(img, "huang")
> ijtiff::display(masked[, , 1, 1])
> masked <- auto_thresh_apply_mask(img, 25)
> ijtiff::display(masked[, , 1, 1])
> 
> 
> 
> cleanEx()
> nameEx("mean_stack_thresh")
> ### * mean_stack_thresh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mean_stack_thresh
> ### Title: Threshold every image frame in an image stack based on their
> ###   mean.
> ### Aliases: mean_stack_thresh
> 
> ### ** Examples
> 
> img <- ijtiff::read_tif(system.file("extdata", "50.tif",
+   package = "autothresholdr"
+ ))
Reading 50.tif: an 8-bit, 100x100 pixel image of unsigned
integer type. Reading 1 channel and 50 frames . . .
 Done.
> ijtiff::display(img[, , 1, 1])
> img_thresh_mask <- mean_stack_thresh(img, "Otsu")
> ijtiff::display(img_thresh_mask[, , 1, 1])
> ijtiff::display(img[, , 1, 1])
> img_thresh_mask <- mean_stack_thresh(img, "Huang")
> ijtiff::display(img_thresh_mask[, , 1, 1])
> 
> 
> 
> cleanEx()
> nameEx("med_stack_thresh")
> ### * med_stack_thresh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: med_stack_thresh
> ### Title: Threshold every image frame in a stack based on their median.
> ### Aliases: med_stack_thresh
> 
> ### ** Examples
> 
> img <- ijtiff::read_tif(system.file("extdata", "50.tif",
+   package = "autothresholdr"
+ ))
Reading 50.tif: an 8-bit, 100x100 pixel image of unsigned
integer type. Reading 1 channel and 50 frames . . .
 Done.
> ijtiff::display(img[, , 1, 1])
> img_thresh_mask <- med_stack_thresh(img, "Otsu")
> ijtiff::display(img_thresh_mask[, , 1, 1])
> ijtiff::display(img[, , 1, 1])
> img_thresh_mask <- med_stack_thresh(img, "Triangle")
> ijtiff::display(img_thresh_mask[, , 1, 1])
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.194 0.284 4.607 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
